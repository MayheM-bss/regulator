
regulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afc  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000969  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000515  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025e  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	84 c0       	rjmp	.+264    	; 0x14a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b0 d0       	rcall	.+352    	; 0x224 <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <USARTRecevied>:
	}
}


void SetPWM()
{
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <USARTRecevied>
  cc:	8c b1       	in	r24, 0x0c	; 12
  ce:	08 95       	ret

000000d0 <TimerInit>:
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	83 bf       	out	0x33, r24	; 51
  d4:	12 be       	out	0x32, r1	; 50
  d6:	87 b7       	in	r24, 0x37	; 55
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 bf       	out	0x37, r24	; 55
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <UARTInit>:
  e0:	8b 9a       	sbi	0x11, 3	; 17
  e2:	1b b8       	out	0x0b, r1	; 11
  e4:	88 e9       	ldi	r24, 0x98	; 152
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  ee:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  f2:	84 e3       	ldi	r24, 0x34	; 52
  f4:	89 b9       	out	0x09, r24	; 9
  f6:	08 95       	ret

000000f8 <TransmitAD7705>:
  f8:	c0 98       	cbi	0x18, 0	; 24
  fa:	8f b9       	out	0x0f, r24	; 15
  fc:	77 9b       	sbis	0x0e, 7	; 14
  fe:	fe cf       	rjmp	.-4      	; 0xfc <TransmitAD7705+0x4>
 100:	c0 9a       	sbi	0x18, 0	; 24
 102:	08 95       	ret

00000104 <SPIInit>:
 104:	87 b3       	in	r24, 0x17	; 23
 106:	87 60       	ori	r24, 0x07	; 7
 108:	87 bb       	out	0x17, r24	; 23
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	88 bb       	out	0x18, r24	; 24
 110:	8f e7       	ldi	r24, 0x7F	; 127
 112:	8d b9       	out	0x0d, r24	; 13
 114:	c2 98       	cbi	0x18, 2	; 24
 116:	8f e1       	ldi	r24, 0x1F	; 31
 118:	9e e4       	ldi	r25, 0x4E	; 78
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <SPIInit+0x16>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <SPIInit+0x1c>
 120:	00 00       	nop
 122:	c2 9a       	sbi	0x18, 2	; 24
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	e8 df       	rcall	.-48     	; 0xf8 <TransmitAD7705>
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	e6 df       	rcall	.-52     	; 0xf8 <TransmitAD7705>
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	e4 df       	rcall	.-56     	; 0xf8 <TransmitAD7705>
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	e2 df       	rcall	.-60     	; 0xf8 <TransmitAD7705>
 134:	90 9b       	sbis	0x12, 0	; 18
 136:	fe cf       	rjmp	.-4      	; 0x134 <SPIInit+0x30>
 138:	08 95       	ret

0000013a <PWMInit>:
 13a:	bd 9a       	sbi	0x17, 5	; 23
 13c:	83 e8       	ldi	r24, 0x83	; 131
 13e:	8f bd       	out	0x2f, r24	; 47
 140:	89 e0       	ldi	r24, 0x09	; 9
 142:	8e bd       	out	0x2e, r24	; 46
 144:	1d bc       	out	0x2d, r1	; 45
 146:	1c bc       	out	0x2c, r1	; 44
 148:	08 95       	ret

0000014a <__vector_16>:
	
}

ISR (TIMER0_OVF_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
	cli();
 154:	f8 94       	cli
	
	sei();
 156:	78 94       	sei
}
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_18>:

ISR (USART0_RX_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	0b b6       	in	r0, 0x3b	; 59
 16e:	0f 92       	push	r0
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	25 97       	sbiw	r28, 0x05	; 5
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	cd bf       	out	0x3d, r28	; 61
	cli();
 1a2:	f8 94       	cli
 1a4:	8e 01       	movw	r16, r28
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	6e 01       	movw	r12, r28
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	c8 0e       	add	r12, r24
 1b0:	d1 1c       	adc	r13, r1
 1b2:	78 01       	movw	r14, r16
	unsigned char message[5];
	for (int i = 0; i < 5; i++)
	{
		message[i] = USARTRecevied();
 1b4:	89 df       	rcall	.-238    	; 0xc8 <USARTRecevied>
 1b6:	f7 01       	movw	r30, r14
 1b8:	81 93       	st	Z+, r24
 1ba:	7f 01       	movw	r14, r30

ISR (USART0_RX_vect)
{
	cli();
	unsigned char message[5];
	for (int i = 0; i < 5; i++)
 1bc:	ec 15       	cp	r30, r12
 1be:	fd 05       	cpc	r31, r13
 1c0:	c9 f7       	brne	.-14     	; 0x1b4 <__vector_18+0x52>
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	{
		message[i] = USARTRecevied();
	}
	for (int i = 0; i < 5; i++)
	{
		reqTemp = reqTemp + message[i];
 1ca:	f8 01       	movw	r30, r16
 1cc:	21 91       	ld	r18, Z+
 1ce:	8f 01       	movw	r16, r30
 1d0:	82 0f       	add	r24, r18
 1d2:	91 1d       	adc	r25, r1
	unsigned char message[5];
	for (int i = 0; i < 5; i++)
	{
		message[i] = USARTRecevied();
	}
	for (int i = 0; i < 5; i++)
 1d4:	ec 15       	cp	r30, r12
 1d6:	fd 05       	cpc	r31, r13
 1d8:	c1 f7       	brne	.-16     	; 0x1ca <__vector_18+0x68>
 1da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	{
		reqTemp = reqTemp + message[i];
	}
	sei();
 1e2:	78 94       	sei
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	0f 90       	pop	r0
 218:	0b be       	out	0x3b, r0	; 59
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:

int main(void)
{
	SPIInit();
 224:	6f df       	rcall	.-290    	; 0x104 <SPIInit>
	UARTInit();
 226:	5c df       	rcall	.-328    	; 0xe0 <UARTInit>
	PWMInit();
 228:	88 df       	rcall	.-240    	; 0x13a <PWMInit>
 22a:	52 df       	rcall	.-348    	; 0xd0 <TimerInit>
	TimerInit();
 22c:	ff cf       	rjmp	.-2      	; 0x22c <main+0x8>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
